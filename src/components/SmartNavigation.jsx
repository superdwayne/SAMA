import React, { useState, useEffect } from 'react';\nimport { enhancedNavigationService } from '../utils/enhancedNavigation';\nimport './EnhancedNavigation.css';\n\nconst SmartNavigation = ({ \n  userLocation, \n  destination, \n  onNavigationEnd, \n  mapRef,\n  mapboxToken,\n  onRouteCalculated,\n  onStepAdvanced,\n  viewport\n}) => {\n  const [currentRoute, setCurrentRoute] = useState(null);\n  const [currentStep, setCurrentStep] = useState(null);\n  const [isNavigating, setIsNavigating] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [distanceToNext, setDistanceToNext] = useState(0);\n  const [distanceToDestination, setDistanceToDestination] = useState(0);\n  const [isOffRoute, setIsOffRoute] = useState(false);\n  const [isRecalculating, setIsRecalculating] = useState(false);\n  const [eta, setEta] = useState(null);\n  const [routeSteps, setRouteSteps] = useState([]);\n  const [showStepsList, setShowStepsList] = useState(false);\n  \n  // Enhanced state for dynamic repositioning\n  const [wrongTurnCount, setWrongTurnCount] = useState(0);\n  const [recalculationCount, setRecalculationCount] = useState(0);\n  const [userHeading, setUserHeading] = useState(null);\n  const [expectedHeading, setExpectedHeading] = useState(null);\n  const [distanceFromRoute, setDistanceFromRoute] = useState(0);\n  const [navigationQuality, setNavigationQuality] = useState('excellent');\n  const [lastWrongTurn, setLastWrongTurn] = useState(null);\n\n  useEffect(() => {\n    if (userLocation && destination && mapboxToken) {\n      startNavigation();\n    }\n    \n    return () => {\n      enhancedNavigationService.stopNavigation();\n    };\n  }, [userLocation, destination, mapboxToken]);\n\n  // Start enhanced navigation\n  const startNavigation = async () => {\n    try {\n      setIsNavigating(true);\n      setWrongTurnCount(0);\n      setRecalculationCount(0);\n      enhancedNavigationService.mapboxToken = mapboxToken;\n\n      const route = await enhancedNavigationService.startNavigation(\n        userLocation,\n        destination,\n        {\n          onRouteCalculated: (route) => {\n            setCurrentRoute(route);\n            setRouteSteps(route.steps);\n            setCurrentStep(route.steps[0]);\n            calculateETA(route);\n            \n            if (onRouteCalculated) {\n              onRouteCalculated(route);\n            }\n          },\n          \n          onLocationUpdate: (data) => {\n            setCurrentStep(data.currentStep);\n            setProgress(data.progress);\n            setDistanceToNext(data.distanceToNext);\n            setDistanceToDestination(data.distanceToDestination);\n            setDistanceFromRoute(data.distanceToRoute || 0);\n            setUserHeading(data.userHeading);\n            setExpectedHeading(data.expectedHeading);\n            \n            // Update navigation quality based on metrics\n            updateNavigationQuality(data);\n            updateETA(data.distanceToDestination);\n          },\n          \n          onStepAdvanced: (step) => {\n            setCurrentStep(step);\n            if (onStepAdvanced) {\n              onStepAdvanced(step);\n            }\n            console.log('Next instruction:', step.voiceInstruction);\n          },\n          \n          // Enhanced wrong turn detection\n          onWrongTurn: (data) => {\n            setWrongTurnCount(prev => prev + 1);\n            setLastWrongTurn({\n              location: data.location,\n              distanceFromRoute: data.distanceFromRoute,\n              headingDeviation: data.headingDeviation,\n              timestamp: new Date()\n            });\n            console.log('üîÑ Wrong turn detected:', data);\n          },\n          \n          onOffRoute: () => {\n            setIsOffRoute(true);\n            setIsRecalculating(true);\n          },\n          \n          onRouteRecalculated: (newRoute) => {\n            setCurrentRoute(newRoute);\n            setRouteSteps(newRoute.steps);\n            setIsOffRoute(false);\n            setIsRecalculating(false);\n            setRecalculationCount(prev => prev + 1);\n            calculateETA(newRoute);\n            console.log('‚úÖ Route recalculated successfully');\n          },\n          \n          onRecalculationFailed: (error) => {\n            setIsRecalculating(false);\n            console.error('‚ùå Route recalculation failed:', error);\n          },\n          \n          onNavigationCompleted: () => {\n            handleNavigationComplete();\n          },\n          \n          onError: (error) => {\n            console.error('Navigation error:', error);\n            setIsNavigating(false);\n          }\n        }\n      );\n\n    } catch (error) {\n      console.error('Failed to start navigation:', error);\n      setIsNavigating(false);\n    }\n  };\n\n  // Update navigation quality based on performance metrics\n  const updateNavigationQuality = (data) => {\n    const metrics = {\n      distanceFromRoute: data.distanceToRoute || 0,\n      headingDeviation: data.headingDeviation || 0,\n      wrongTurns: wrongTurnCount,\n      recalculations: recalculationCount\n    };\n\n    let quality = 'excellent';\n    \n    if (metrics.distanceFromRoute > 20 || metrics.headingDeviation > 30 || metrics.wrongTurns > 2) {\n      quality = 'poor';\n    } else if (metrics.distanceFromRoute > 10 || metrics.headingDeviation > 15 || metrics.wrongTurns > 1) {\n      quality = 'good';\n    } else if (metrics.distanceFromRoute > 5 || metrics.wrongTurns > 0) {\n      quality = 'fair';\n    }\n    \n    setNavigationQuality(quality);\n  };\n\n  // Update user location with enhanced service\n  useEffect(() => {\n    if (userLocation && isNavigating) {\n      enhancedNavigationService.updateLocation(userLocation);\n    }\n  }, [userLocation, isNavigating]);\n\n  // Calculate ETA\n  const calculateETA = (route) => {\n    if (route && route.duration) {\n      const now = new Date();\n      const arrivalTime = new Date(now.getTime() + route.duration * 1000);\n      setEta(arrivalTime);\n    }\n  };\n\n  // Update ETA based on current distance\n  const updateETA = (distanceRemaining) => {\n    if (currentRoute && distanceRemaining) {\n      const avgSpeed = 1.4; // Average walking speed m/s\n      const timeRemaining = distanceRemaining / avgSpeed;\n      const now = new Date();\n      const arrivalTime = new Date(now.getTime() + timeRemaining * 1000);\n      setEta(arrivalTime);\n    }\n  };\n\n  // Handle navigation completion\n  const handleNavigationComplete = () => {\n    setIsNavigating(false);\n    setTimeout(() => {\n      onNavigationEnd();\n    }, 2000);\n  };\n\n  // Stop navigation\n  const handleStopNavigation = () => {\n    enhancedNavigationService.stopNavigation();\n    setIsNavigating(false);\n    onNavigationEnd();\n  };\n\n  // Get next few steps preview\n  const getNextSteps = () => {\n    if (!routeSteps || !currentStep) return [];\n    const currentIndex = routeSteps.findIndex(step => step.id === currentStep.id);\n    return routeSteps.slice(currentIndex + 1, currentIndex + 4);\n  };\n\n  // Get navigation quality indicator\n  const getQualityIndicator = () => {\n    const indicators = {\n      excellent: { icon: 'üü¢', text: 'On track', color: '#10b981' },\n      fair: { icon: 'üü°', text: 'Minor deviation', color: '#f59e0b' },\n      good: { icon: 'üü†', text: 'Slight off course', color: '#f97316' },\n      poor: { icon: 'üî¥', text: 'Repositioning needed', color: '#ef4444' }\n    };\n    \n    return indicators[navigationQuality] || indicators.excellent;\n  };\n\n  if (!isNavigating || !currentStep) {\n    return null;\n  }\n\n  // Calculate relative arrow rotation\n  const mapBearing = viewport?.bearing || 0;\n  const nextBearing = currentStep.maneuver.bearing_after || 0;\n  const relativeArrowRotation = nextBearing - mapBearing;\n  const qualityIndicator = getQualityIndicator();\n\n  return (\n    <div className=\"enhanced-navigation smart-navigation\">\n      {/* Enhanced Status Bar */}\n      <div className=\"nav-status\">\n        {isRecalculating && (\n          <div className=\"recalculating-banner smart-banner\">\n            <div className=\"banner-content\">\n              üîÑ <span>Recalculating route...</span>\n              <div className=\"pulse-animation\"></div>\n            </div>\n          </div>\n        )}\n        {isOffRoute && !isRecalculating && (\n          <div className=\"off-route-banner smart-banner\">\n            <div className=\"banner-content\">\n              ‚ö†Ô∏è <span>Wrong turn detected - Getting you back on track</span>\n            </div>\n          </div>\n        )}\n        \n        {/* Navigation Quality Indicator */}\n        <div className=\"quality-indicator\" style={{ color: qualityIndicator.color }}>\n          <span className=\"quality-icon\">{qualityIndicator.icon}</span>\n          <span className=\"quality-text\">{qualityIndicator.text}</span>\n          {distanceFromRoute > 0 && (\n            <span className=\"distance-from-route\">\n              ({enhancedNavigationService.formatDistance(distanceFromRoute)} from route)\n            </span>\n          )}\n        </div>\n      </div>\n\n      {/* Enhanced Main Navigation Panel */}\n      <div className=\"nav-panel smart-panel\">\n        {/* Current Instruction with Enhanced Arrow */}\n        <div className=\"current-instruction smart-instruction\">\n          <div\n            className=\"turn-arrow smart-arrow\"\n            style={{\n              transform: `rotate(${relativeArrowRotation}deg)`,\n              filter: isOffRoute ? 'brightness(0.7) saturate(0.5)' : 'none'\n            }}\n          >\n            <svg width=\"80\" height=\"80\" viewBox=\"0 0 80 80\">\n              <defs>\n                <linearGradient id=\"arrowGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                  <stop offset=\"0%\" stopColor={isOffRoute ? '#ef4444' : '#007cbf'} />\n                  <stop offset=\"100%\" stopColor={isOffRoute ? '#dc2626' : '#0056b3'} />\n                </linearGradient>\n              </defs>\n              <polygon \n                points=\"40,10 70,70 40,55 10,70\" \n                fill=\"url(#arrowGradient)\"\n                stroke=\"#fff\"\n                strokeWidth=\"2\"\n              />\n            </svg>\n          </div>\n          \n          <div className=\"instruction-content\">\n            <div className=\"instruction-text\">\n              {currentStep.instruction}\n            </div>\n            <div className=\"instruction-distance\">\n              {enhancedNavigationService.formatDistance(distanceToNext)}\n            </div>\n            \n            {/* Heading Information */}\n            {userHeading && expectedHeading && (\n              <div className=\"heading-info\">\n                <span className=\"heading-label\">Direction:</span>\n                <span className=\"heading-value\">\n                  {Math.round(userHeading)}¬∞ \n                  {Math.abs(userHeading - expectedHeading) > 15 && (\n                    <span className=\"heading-deviation\">\n                      (¬±{Math.round(Math.abs(userHeading - expectedHeading))}¬∞)\n                    </span>\n                  )}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Street Name */}\n        {currentStep.streetName && (\n          <div className=\"street-name smart-street\">\n            Continue on <strong>{currentStep.streetName}</strong>\n          </div>\n        )}\n\n        {/* Enhanced Progress Bar */}\n        <div className=\"progress-container smart-progress\">\n          <div className=\"progress-bar\">\n            <div \n              className=\"progress-fill\" \n              style={{ \n                width: `${progress * 100}%`,\n                backgroundColor: qualityIndicator.color\n              }}\n            />\n            {/* Milestone markers */}\n            <div className=\"progress-markers\">\n              {[25, 50, 75].map(milestone => (\n                <div \n                  key={milestone}\n                  className={`progress-marker ${progress * 100 >= milestone ? 'passed' : ''}`}\n                  style={{ left: `${milestone}%` }}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"progress-text\">\n            {Math.round(progress * 100)}% complete\n            {wrongTurnCount > 0 && (\n              <span className=\"wrong-turn-count\"> ‚Ä¢ {wrongTurnCount} wrong turn{wrongTurnCount > 1 ? 's' : ''}</span>\n            )}\n          </div>\n        </div>\n\n        {/* Enhanced Route Summary */}\n        <div className=\"route-summary smart-summary\">\n          <div className=\"summary-grid\">\n            <div className=\"summary-item\">\n              <span className=\"summary-icon\">üìç</span>\n              <div className=\"summary-content\">\n                <span className=\"summary-label\">Distance</span>\n                <span className=\"summary-value\">\n                  {enhancedNavigationService.formatDistance(distanceToDestination)}\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"summary-item\">\n              <span className=\"summary-icon\">‚è±Ô∏è</span>\n              <div className=\"summary-content\">\n                <span className=\"summary-label\">Time</span>\n                <span className=\"summary-value\">\n                  {currentRoute ? enhancedNavigationService.formatDuration(\n                    currentRoute.duration * (1 - progress)\n                  ) : ''}\n                </span>\n              </div>\n            </div>\n            \n            {eta && (\n              <div className=\"summary-item\">\n                <span className=\"summary-icon\">üïê</span>\n                <div className=\"summary-content\">\n                  <span className=\"summary-label\">Arrival</span>\n                  <span className=\"summary-value\">\n                    {eta.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                  </span>\n                </div>\n              </div>\n            )}\n            \n            {recalculationCount > 0 && (\n              <div className=\"summary-item\">\n                <span className=\"summary-icon\">üîÑ</span>\n                <div className=\"summary-content\">\n                  <span className=\"summary-label\">Recalculated</span>\n                  <span className=\"summary-value\">{recalculationCount}x</span>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Next Steps Preview with Enhanced UI */}\n        <div className=\"next-steps-preview smart-steps\">\n          <button \n            className=\"toggle-steps smart-toggle\"\n            onClick={() => setShowStepsList(!showStepsList)}\n          >\n            <span className=\"toggle-icon\">{showStepsList ? 'üìñ' : 'üìã'}</span>\n            <span className=\"toggle-text\">\n              {showStepsList ? 'Hide Steps' : 'Show Upcoming Steps'}\n            </span>\n            <span className=\"toggle-arrow\">{showStepsList ? '‚ñº' : '‚ñ∂'}</span>\n          </button>\n          \n          {showStepsList && (\n            <div className=\"steps-list smart-steps-list\">\n              {getNextSteps().map((step, index) => (\n                <div key={step.id} className=\"step-item smart-step\">\n                  <div className=\"step-number\">{index + 2}</div>\n                  <div className=\"step-icon\">\n                    {enhancedNavigationService.getManeuverIcon(\n                      step.maneuver.type, \n                      step.maneuver.modifier\n                    )}\n                  </div>\n                  <div className=\"step-content\">\n                    <div className=\"step-instruction\">{step.instruction}</div>\n                    <div className=\"step-details\">\n                      <span className=\"step-distance\">\n                        {enhancedNavigationService.formatDistance(step.distance)}\n                      </span>\n                      {step.streetName && step.streetName !== 'Continue' && (\n                        <span className=\"step-street\">on {step.streetName}</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Enhanced Controls */}\n        <div className=\"nav-controls smart-controls\">\n          <button \n            className=\"nav-button secondary smart-button\"\n            onClick={() => setShowStepsList(!showStepsList)}\n          >\n            <span className=\"button-icon\">üìã</span>\n            <span className=\"button-text\">Steps</span>\n          </button>\n          \n          {wrongTurnCount > 0 && (\n            <button \n              className=\"nav-button tertiary smart-button\"\n              onClick={() => {\n                // Reset wrong turn counter\n                setWrongTurnCount(0);\n                setLastWrongTurn(null);\n              }}\n            >\n              <span className=\"button-icon\">üîÑ</span>\n              <span className=\"button-text\">Reset</span>\n            </button>\n          )}\n          \n          <button \n            className=\"nav-button primary smart-button\"\n            onClick={handleStopNavigation}\n          >\n            <span className=\"button-icon\">‚úï</span>\n            <span className=\"button-text\">End Navigation</span>\n          </button>\n        </div>\n\n        {/* Wrong Turn History (for debugging/feedback) */}\n        {lastWrongTurn && process.env.NODE_ENV === 'development' && (\n          <div className=\"debug-info\">\n            <h4>Last Wrong Turn:</h4>\n            <p>Distance from route: {enhancedNavigationService.formatDistance(lastWrongTurn.distanceFromRoute)}</p>\n            <p>Heading deviation: {Math.round(lastWrongTurn.headingDeviation)}¬∞</p>\n            <p>Time: {lastWrongTurn.timestamp.toLocaleTimeString()}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SmartNavigation;"