/**\n * Price configuration and utilities for Amsterdam Street Art Map\n * Centralizes price IDs and fallback pricing for all regions\n */\n\n// Stripe Price IDs for each region\nexport const REGION_PRICE_IDS = {\n  'centre': 'price_1RlrHzJ3urOr8HD7UDo4U0vY',\n  'center': 'price_1RlrHzJ3urOr8HD7UDo4U0vY',\n  'noord': 'price_1RlrKYJ3urOr8HD7HzOpJ8bJ',\n  'north': 'price_1RlrKYJ3urOr8HD7HzOpJ8bJ',\n  'east': 'price_1RbeqUJ3urOr8HD7ElBhh5rB',\n  'nieuw-west': 'price_1Rbf2kJ3urOr8HD7QTcbJLSo',\n  'new-west': 'price_1Rbf2kJ3urOr8HD7QTcbJLSo',\n  'south': 'price_1RbeqwJ3urOr8HD7Rf6mUldT',\n  'zuid': 'price_1RbeqwJ3urOr8HD7Rf6mUldT',\n  'south-east': 'price_1Rbf8wJ3urOr8HD7gvLlK0aa',\n  'west': 'price_1Rbf23J3urOr8HD7gxyHwFW0'\n};\n\n// Fallback prices (used when Stripe API fails)\n// These should match the actual Stripe prices\nexport const FALLBACK_PRICES = {\n  'centre': '€4,99',\n  'center': '€4,99',\n  'noord': '€5,99',\n  'north': '€5,99',\n  'east': '€4,99',\n  'nieuw-west': '€3,99',\n  'new-west': '€3,99',\n  'south': '€7,00',\n  'zuid': '€7,00',\n  'south-east': '€5,49',\n  'west': '€4,49'\n};\n\n/**\n * Fetches dynamic price from Stripe API for a given region\n * @param {string} regionId - The region identifier\n * @returns {Promise<Object>} Price object with formattedPrice property\n */\nexport const fetchRegionPrice = async (regionId) => {\n  try {\n    const priceId = REGION_PRICE_IDS[regionId];\n    \n    if (!priceId) {\n      console.warn('⚠️ No price ID found for region:', regionId);\n      return { formattedPrice: FALLBACK_PRICES[regionId] || '€4,99' };\n    }\n\n    console.log('💰 Fetching price for region:', regionId, 'with price ID:', priceId);\n    \n    const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';\n    console.log('🌐 API URL being used:', API_URL);\n    \n    const fetchUrl = `${API_URL}/get-price?priceId=${encodeURIComponent(priceId)}`;\n    console.log('📡 Fetching from:', fetchUrl);\n    \n    const response = await fetch(fetchUrl);\n    \n    if (response.ok) {\n      const priceData = await response.json();\n      console.log('💰 Price data received from Stripe:', priceData);\n      return priceData;\n    } else {\n      const errorText = await response.text();\n      console.error('❌ Failed to fetch price from API:', response.status, response.statusText, errorText);\n      throw new Error(`API returned ${response.status}: ${errorText}`);\n    }\n  } catch (error) {\n    console.error('❌ Error fetching price for region', regionId, ':', error);\n    // Return fallback price\n    return { formattedPrice: FALLBACK_PRICES[regionId] || '€4,99' };\n  }\n};\n\n/**\n * Gets the price ID for a given region\n * @param {string} regionId - The region identifier\n * @returns {string|null} The Stripe price ID or null if not found\n */\nexport const getRegionPriceId = (regionId) => {\n  return REGION_PRICE_IDS[regionId] || null;\n};\n\n/**\n * Gets the fallback price for a given region\n * @param {string} regionId - The region identifier\n * @returns {string} The formatted fallback price\n */\nexport const getFallbackPrice = (regionId) => {\n  return FALLBACK_PRICES[regionId] || '€4,99';\n};\n\n/**\n * Gets all available regions with their price IDs\n * @returns {Array} Array of region objects with id and priceId\n */\nexport const getAllRegionsWithPrices = () => {\n  return Object.entries(REGION_PRICE_IDS).map(([id, priceId]) => ({\n    id,\n    priceId,\n    fallbackPrice: FALLBACK_PRICES[id]\n  }));\n};\n